/*
 Copyright (c) 2022 Kevin Jones, All rights reserved.
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.
 */

export class Symbols {
  private typeDecl: TypeDeclaration;

  constructor(typeDecl: TypeDeclaration) {
    this.typeDecl = typeDecl;
  }

  asApex(): string {
    const builder = new ApexBuilder();
    builder.appendNL(
      `/* Generated by apexlink-gulp @ ${new Date().toLocaleString()}*/`
    );

    this.buildType(this.typeDecl, builder);
    builder.newLine();
    builder.appendNL('/*');
    builder.appendNL(
      JSON.stringify(this.typeDecl, null, 4).replace('    ', '\t')
    );
    builder.appendNL('*/');

    return builder.buffer;
  }

  buildType(typeDecl: TypeDeclaration, builder: ApexBuilder): void {
    builder.append(this.modifiersAndAnnotations(typeDecl.tableDeclaration));
    builder.append(this.nature(typeDecl));
    builder.append(`${typeDecl.name}`);
    if (typeDecl.parentClass.length > 0)
      builder.append(`extends ${typeDecl.parentClass}`);
    if (typeDecl.interfaces.length > 0)
      builder.append(`implements ${typeDecl.interfaces.join(', ')}`);

    builder.appendNL('{');
    builder.withIndent(() => {
      typeDecl.properties.forEach(property =>
        this.buildProperty(property, builder)
      );
      if (typeDecl.properties.length > 0) builder.appendNL('');

      typeDecl.constructors.forEach(ctor =>
        this.buildConstructor(ctor, builder)
      );
      if (typeDecl.methods.length > 0) builder.appendNL('');

      typeDecl.methods.forEach(method => this.buildMethod(method, builder));
      if (typeDecl.methods.length > 0) builder.appendNL('');

      typeDecl.innerClasses.forEach(inner => this.buildType(inner, builder));
    });
    builder.appendNL('}');
  }

  buildProperty(property: Property, builder: ApexBuilder): void {
    builder.append(this.modifiersAndAnnotations(property));
    builder.appendNL(`${property.type} ${property.name}`);
  }

  buildConstructor(constructor: Constructor, builder: ApexBuilder): void {
    builder.append(this.modifiersAndAnnotations(constructor));
    builder.append(constructor.name);
    const paramList = constructor.parameters
      .map(param => `${param.type} ${param.name}`)
      .join(', ');
    builder.append('(' + paramList + ')', false);
    builder.appendNL('{}');
  }

  buildMethod(method: Method, builder: ApexBuilder): void {
    builder.append(this.modifiersAndAnnotations(method));
    builder.append(`${method.returnType} ${method.name}`);
    const paramList = method.parameters
      .map(param => `${param.type} ${param.name}`)
      .join(', ');
    builder.append('(' + paramList + ')', false);
    if (method.modifiers.find(m => m == 'abstract') != undefined) {
      builder.appendNL(';');
    } else if (method.returnType != 'void') {
      builder.appendNL('{ return null; }');
    } else {
      builder.appendNL('{}');
    }
  }

  nature(typeDecl: TypeDeclaration): string {
    if (this.isInterface(typeDecl)) return 'interface';
    else if (this.isEnum(typeDecl)) return 'enum';
    else return 'class';
  }

  isInterface(typeDecl: TypeDeclaration): boolean {
    // None abstract that has abstract methods
    return (
      typeDecl.tableDeclaration.modifiers.find(m => m == 'abstract') ==
        undefined &&
      typeDecl.methods.find(
        m => m.modifiers.find(m => m == 'abstract') != undefined
      ) != undefined
    );
  }

  isEnum(typeDecl: TypeDeclaration): boolean {
    // No methods but static properties of self type
    return (
      typeDecl.methods.length == 0 &&
      typeDecl.properties.length > 0 &&
      typeDecl.properties.every(
        p =>
          p.type == typeDecl.name &&
          p.annotations.length == 0 &&
          p.modifiers.join(' ') == 'static public final'
      )
    );
  }

  modifiersAndAnnotations(element: ModifiersAndAnnotations): string {
    let result = element.annotations
      .map(annotation => `@${annotation.name}`)
      .join(' ');
    if (result.length > 0 && element.modifiers.length > 0) result += ' ';
    return result + element.modifiers.join(' ');
  }
}

class ApexBuilder {
  buffer = '';
  indentLevel = 0;
  indented = false;

  withIndent(fn: (indent: number) => string | void) {
    this.indentLevel += 1;
    this.append(fn(this.indentLevel));
    this.indentLevel -= 1;
  }

  append(value: string | void, autospace = true, newline = false): void {
    if (value != undefined) {
      this.indent();
      if (autospace && this.buffer[this.buffer.length - 1] != ' ')
        this.buffer += ' ';
      this.buffer += value;
      if (newline) this.newLine();
    }
  }

  appendNL(value: string): void {
    this.append(value, true, true);
  }

  indent(): void {
    if (!this.indented) {
      this.indented = true;
      for (let i = 0; i < this.indentLevel; i++) this.buffer += '\t';
    }
  }

  newLine(): void {
    this.buffer += '\n';
    this.indented = false;
  }
}

export interface TypeDeclaration {
  name: string;
  namespace: string;
  tableDeclaration: TableDeclaration;
  parentClass: string;
  interfaces: string[];
  constructors: Constructor[];
  methods: Method[];
  properties: Property[];
  innerClasses: TypeDeclaration[];
}

interface Annotation {
  name: string;
}

interface ModifiersAndAnnotations {
  annotations: Annotation[];
  modifiers: string[];
}

interface TableDeclaration extends ModifiersAndAnnotations {
  name: string;
  type: string;
}

interface Property extends ModifiersAndAnnotations {
  name: string;
  type: string;
}

interface Parameters {
  name: string;
  type: string;
}

interface Constructor extends ModifiersAndAnnotations {
  name: string;
  parameters: Parameters[];
}

interface Method extends ModifiersAndAnnotations {
  returnType: string;
  name: string;
  parameters: Parameters[];
}
